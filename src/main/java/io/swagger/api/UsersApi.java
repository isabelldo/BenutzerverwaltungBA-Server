/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.47).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.UserModel;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import jakarta.validation.Valid;
import java.util.List;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-10-13T12:32:13.695655691Z[GMT]")
@Validated
public interface UsersApi {

    @Operation(summary = "get all users", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Admin" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful response", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserModel.class)))),

            @ApiResponse(responseCode = "400", description = "Bad request") })
    @RequestMapping(value = "/users",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<UserModel>> usersGet();


    @Operation(summary = "delete user", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Admin" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "user deleted successfully"),

            @ApiResponse(responseCode = "401", description = "not authorized"),

            @ApiResponse(responseCode = "404", description = "user not found") })
    @RequestMapping(value = "/users/{id}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> usersIdDelete(@Parameter(in = ParameterIn.PATH, description = "ID of user", required=true, schema=@Schema()) @PathVariable("id") String id
    );


    @Operation(summary = "get one user", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Admin", "UserModel" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserModel.class))),

            @ApiResponse(responseCode = "404", description = "user not found") })
    @RequestMapping(value = "/users/{id}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<UserModel> usersIdGet(@Parameter(in = ParameterIn.PATH, description = "ID of user", required=true, schema=@Schema()) @PathVariable("id") String id
    );


    @Operation(summary = "update user", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Admin" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "user updated successfully"),

            @ApiResponse(responseCode = "400", description = "bad request"),

            @ApiResponse(responseCode = "401", description = "not authorized") })
    @RequestMapping(value = "/users/{id}",
            consumes = { "application/json" },
            method = RequestMethod.PATCH)
    ResponseEntity<Void> usersIdPatch(@Parameter(in = ParameterIn.PATH, description = "ID of user", required=true, schema=@Schema()) @PathVariable("id") String id
            , @Parameter(in = ParameterIn.DEFAULT, description = "data to update user-informations", required=true, schema=@Schema()) @Valid @RequestBody UserModel body
    );


    @Operation(summary = "update user", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Admin" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "user updated successfully"),

            @ApiResponse(responseCode = "400", description = "bad request"),

            @ApiResponse(responseCode = "401", description = "not authorized") })
    @RequestMapping(value = "/users/{id}",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> usersIdPut(@Parameter(in = ParameterIn.PATH, description = "ID of user", required=true, schema=@Schema()) @PathVariable("id") String id
            , @Parameter(in = ParameterIn.DEFAULT, description = "data to update user-informations", required=true, schema=@Schema()) @Valid @RequestBody UserModel body
    );


    @Operation(summary = "create user", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Admin" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "user created successfully"),

            @ApiResponse(responseCode = "400", description = "bad request"),

            @ApiResponse(responseCode = "401", description = "not authorized") })
    @RequestMapping(value = "/users",
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Void> usersPost(@Parameter(in = ParameterIn.DEFAULT, description = "data of the new user", schema=@Schema()) @Valid @RequestBody UserModel body
    );

}



